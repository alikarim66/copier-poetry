{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Copier Poetry \u00a4 Copier template for Poetry projects. This copier template is mainly for my own usage, but feel free to try it out, or fork it! Features \u00a4 Poetry setup, with pre-defined pyproject.toml Documentation built with MkDocs ( Material theme and \"autodoc\" mkdocstrings plugin ) Pre-configured tools for code formatting, quality analysis and testing: black , flakehell ( flake8 wrapper) and plugins, isort , mypy , safety Tests run with pytest and plugins, with coverage support Cross-platform tasks with duty Support for GitHub workflow and Gitlab CI Python 3.6 or above Auto-generated CHANGELOG.md from git commits (using Angular message style) Auto-generated CREDITS.md from Python dependencies All licenses from choosealicense.com Makefile for convenience Quick setup and usage \u00a4 Make sure all the requirements are met, then: copier \"https://github.com/pawamoy/copier-poetry.git\" /path/to/your/new/project Or even shorter: copier \"gh:pawamoy/copier-poetry\" /path/to/your/new/project See the documentation for more details.","title":"Overview"},{"location":"#copier-poetry","text":"Copier template for Poetry projects. This copier template is mainly for my own usage, but feel free to try it out, or fork it!","title":"Copier Poetry"},{"location":"#features","text":"Poetry setup, with pre-defined pyproject.toml Documentation built with MkDocs ( Material theme and \"autodoc\" mkdocstrings plugin ) Pre-configured tools for code formatting, quality analysis and testing: black , flakehell ( flake8 wrapper) and plugins, isort , mypy , safety Tests run with pytest and plugins, with coverage support Cross-platform tasks with duty Support for GitHub workflow and Gitlab CI Python 3.6 or above Auto-generated CHANGELOG.md from git commits (using Angular message style) Auto-generated CREDITS.md from Python dependencies All licenses from choosealicense.com Makefile for convenience","title":"Features"},{"location":"#quick-setup-and-usage","text":"Make sure all the requirements are met, then: copier \"https://github.com/pawamoy/copier-poetry.git\" /path/to/your/new/project Or even shorter: copier \"gh:pawamoy/copier-poetry\" /path/to/your/new/project See the documentation for more details.","title":"Quick setup and usage"},{"location":"changelog/","text":"Changelog \u00a4 All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"changelog/#changelog","text":"All notable changes to this project will be documented in this file.","title":"Changelog"},{"location":"code_of_conduct/","text":"Contributor Covenant Code of Conduct \u00a4 Our Pledge \u00a4 In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards \u00a4 Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities \u00a4 Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope \u00a4 This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement \u00a4 Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution \u00a4 This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Code of Conduct"},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","text":"","title":"Contributor Covenant Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at pawamoy@pm.me . All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at http://contributor-covenant.org/version/1/4","title":"Attribution"},{"location":"contributing/","text":"Contributing \u00a4 Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Please note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms. Bug Reports, Feature Requests, and Feedback \u00a4 Create a new project issue ! Try to be as descriptive as possible. Bug Fixes, New Features and Documentation \u00a4 Create a new merge/pull request ! Make sure to follow the guidelines. Merge/Pull Request Guidelines \u00a4 Make sure to have atomic commits and contextual commit messages! Check out this awesome blog post by Chris Beams for more information.","title":"Contributing"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. Please note that this project is released with a Contributor Code of Conduct . By participating in this project you agree to abide by its terms.","title":"Contributing"},{"location":"contributing/#bug-reports-feature-requests-and-feedback","text":"Create a new project issue ! Try to be as descriptive as possible.","title":"Bug Reports, Feature Requests, and Feedback"},{"location":"contributing/#bug-fixes-new-features-and-documentation","text":"Create a new merge/pull request ! Make sure to follow the guidelines.","title":"Bug Fixes, New Features and Documentation"},{"location":"contributing/#mergepull-request-guidelines","text":"Make sure to have atomic commits and contextual commit messages! Check out this awesome blog post by Chris Beams for more information.","title":"Merge/Pull Request Guidelines"},{"location":"generate/","text":"Generating a project \u00a4 To generate a project, run the following command: copier \"https://github.com/pawamoy/copier-poetry.git\" /path/to/your/new/project Or with a shorter command: copier \"gh:pawamoy/copier-poetry\" /path/to/your/new/project You can even generate a project without installing copier, using pipx : pipx run copier \"gh:pawamoy/copier-poetry\" /path/to/your/new/project Questions \u00a4 Copier will then ask you to answer some questions: Your project name project_name? Format: str \ud83c\udfa4 [None]: My Project The project name can use spaces and capitals. It will be used as the main heading in the README for example. Your project description project_description? Format: str \ud83c\udfa4 [None]: My super project! The project description can be as long as you want, and use any character you want. Your full name author_fullname? Format: str \ud83c\udfa4 [None]: Timoth\u00e9e Mazzucotelli The full name will appear as \"author\" in the project's metadata. Your email author_email? Format: str \ud83c\udfa4 [None]: pawamoy@pm.me The full name will appear as \"author email\" in the project's metadata. Your username (e.g. on GitHub) author_username? Format: str \ud83c\udfa4 [None]: pawamoy The username you are using on the git repository provider. Your repository provider repository_provider? Format: str \ud83c\udfa4 (1) github.com (2) gitlab.com (3) bitbucket.org Choice [1]: The repository provider on which you plan to store your project. By default it chooses github.com. Your repository namespace repository_namespace? Format: str \ud83c\udfa4 [pawamoy]: The namespace (or account) on which the project will be stored. It defaults to the username you provided. Your repository name repository_name? Format: str \ud83c\udfa4 [my-project]: The repository name on the selected provider. It defaults to a slugified version of your project's name. The name of the person/entity holding the copyright copyright_holder? Format: str \ud83c\udfa4 [Timoth\u00e9e Mazzucotelli]: The name of the person or entity holding the copyright on the project. It defaults to the full name your provided. The email of the person/entity holding the copyright copyright_holder_email? Format: str \ud83c\udfa4 [pawamoy@pm.me]: The email of the person or entity holding the copyright on the project. It defaults to the email your provided. The copyright date copyright_date? Format: str \ud83c\udfa4 [2020]: The date to apply to the copyright. It defaults to the current year. Your project's license copyright_license? Format: str \ud83c\udfa4 (1) Academic Free License v3.0 (2) Apache License 2.0 (3) Artistic License 2.0 (4) BSD 2-Clause \"Simplified\" License (5) BSD 3-Clause Clear License (6) BSD 3-Clause \"New\" or \"Revised\" License (7) Boost Software License 1.0 (8) Creative Commons Attribution 4.0 (9) Creative Commons Attribution Share Alike 4.0 (10) Creative Commons Zero v1.0 Universal (11) Do What The F*ck You Want To Public License (12) Educational Community License v2.0 (13) Eclipse Public License 1.0 (14) Eclipse Public License 2.0 (15) European Union Public License 1.1 (16) European Union Public License 1.2 (17) GNU Affero General Public License v3.0 (18) GNU General Public License v2.0 (19) GNU General Public License v3.0 (20) GNU Lesser General Public License v2.1 (21) GNU Lesser General Public License v3.0 (22) ISC License (23) LaTeX Project Public License v1.3c (24) MIT License (25) Mozilla Public License 2.0 (26) Microsoft Public License (27) Microsoft Reciprocal License (28) University of Illinois/NCSA Open Source License (29) SIL Open Font License 1.1 (30) Open Software License 3.0 (31) PostgreSQL License (32) The Unlicense (33) zlib License Choice [22]: A license from choosealicence.com. It defaults to ISC License (my personal preference). Your Python package distribution name (for `pip install NAME`) python_package_distribution_name? Format: str \ud83c\udfa4 [my-project]: The name under which your Python package will be distributed. This will be the name of your project on pypi.org for example. Your Python package import name (for `import NAME` in Python code) python_package_import_name? Format: str \ud83c\udfa4 [my_project]: The name that will be used to import your package in Python code. Yes, distribution name and import name can be different! Your CLI name if any (for use in the shell) python_package_command_line_name? Format: str \ud83c\udfa4 [my-project]: The name of the command users will type in the command line to run your program. Output \u00a4 At this point, Copier will generate the project in the specified directory: create pyproject.toml create mkdocs.yml create duties.py create .copier-answers.yml create README.md create Makefile create LICENSE create CREDITS.md create CONTRIBUTING.md create CODE_OF_CONDUCT.md create CHANGELOG.md create .gitlab-ci.yml create .gitignore create tests/ create tests/test_cli.py create tests/conftest.py create tests/__init__.py create src/ create src/my_project/ create src/my_project/cli.py create src/my_project/__main__.py create src/my_project/__init__.py create scripts/ create scripts/setup.sh create scripts/post_generation.py create scripts/multirun.sh create docs/ create docs/index.md create docs/credits.md create docs/contributing.md create docs/code_of_conduct.md create docs/changelog.md create docs/reference/ create docs/reference/cli.md create docs/css/ create docs/css/mkdocstrings.css create config/ create config/pytest.ini create config/mypy.ini create config/coverage.ini create .github/ create .github/FUNDING.yml create .github/workflows/ create .github/workflows/ci.yml create .github/ISSUE_TEMPLATE/ create .github/ISSUE_TEMPLATE/feature_request.md create .github/ISSUE_TEMPLATE/bug_report.md > Running task 1 of 1: python scripts/post_generation.py Project sucessfully generated! Run `make` to show the available actions. See the next chapter to learn how to work on this new project.","title":"Generating a project"},{"location":"generate/#generating-a-project","text":"To generate a project, run the following command: copier \"https://github.com/pawamoy/copier-poetry.git\" /path/to/your/new/project Or with a shorter command: copier \"gh:pawamoy/copier-poetry\" /path/to/your/new/project You can even generate a project without installing copier, using pipx : pipx run copier \"gh:pawamoy/copier-poetry\" /path/to/your/new/project","title":"Generating a project"},{"location":"generate/#questions","text":"Copier will then ask you to answer some questions: Your project name project_name? Format: str \ud83c\udfa4 [None]: My Project The project name can use spaces and capitals. It will be used as the main heading in the README for example. Your project description project_description? Format: str \ud83c\udfa4 [None]: My super project! The project description can be as long as you want, and use any character you want. Your full name author_fullname? Format: str \ud83c\udfa4 [None]: Timoth\u00e9e Mazzucotelli The full name will appear as \"author\" in the project's metadata. Your email author_email? Format: str \ud83c\udfa4 [None]: pawamoy@pm.me The full name will appear as \"author email\" in the project's metadata. Your username (e.g. on GitHub) author_username? Format: str \ud83c\udfa4 [None]: pawamoy The username you are using on the git repository provider. Your repository provider repository_provider? Format: str \ud83c\udfa4 (1) github.com (2) gitlab.com (3) bitbucket.org Choice [1]: The repository provider on which you plan to store your project. By default it chooses github.com. Your repository namespace repository_namespace? Format: str \ud83c\udfa4 [pawamoy]: The namespace (or account) on which the project will be stored. It defaults to the username you provided. Your repository name repository_name? Format: str \ud83c\udfa4 [my-project]: The repository name on the selected provider. It defaults to a slugified version of your project's name. The name of the person/entity holding the copyright copyright_holder? Format: str \ud83c\udfa4 [Timoth\u00e9e Mazzucotelli]: The name of the person or entity holding the copyright on the project. It defaults to the full name your provided. The email of the person/entity holding the copyright copyright_holder_email? Format: str \ud83c\udfa4 [pawamoy@pm.me]: The email of the person or entity holding the copyright on the project. It defaults to the email your provided. The copyright date copyright_date? Format: str \ud83c\udfa4 [2020]: The date to apply to the copyright. It defaults to the current year. Your project's license copyright_license? Format: str \ud83c\udfa4 (1) Academic Free License v3.0 (2) Apache License 2.0 (3) Artistic License 2.0 (4) BSD 2-Clause \"Simplified\" License (5) BSD 3-Clause Clear License (6) BSD 3-Clause \"New\" or \"Revised\" License (7) Boost Software License 1.0 (8) Creative Commons Attribution 4.0 (9) Creative Commons Attribution Share Alike 4.0 (10) Creative Commons Zero v1.0 Universal (11) Do What The F*ck You Want To Public License (12) Educational Community License v2.0 (13) Eclipse Public License 1.0 (14) Eclipse Public License 2.0 (15) European Union Public License 1.1 (16) European Union Public License 1.2 (17) GNU Affero General Public License v3.0 (18) GNU General Public License v2.0 (19) GNU General Public License v3.0 (20) GNU Lesser General Public License v2.1 (21) GNU Lesser General Public License v3.0 (22) ISC License (23) LaTeX Project Public License v1.3c (24) MIT License (25) Mozilla Public License 2.0 (26) Microsoft Public License (27) Microsoft Reciprocal License (28) University of Illinois/NCSA Open Source License (29) SIL Open Font License 1.1 (30) Open Software License 3.0 (31) PostgreSQL License (32) The Unlicense (33) zlib License Choice [22]: A license from choosealicence.com. It defaults to ISC License (my personal preference). Your Python package distribution name (for `pip install NAME`) python_package_distribution_name? Format: str \ud83c\udfa4 [my-project]: The name under which your Python package will be distributed. This will be the name of your project on pypi.org for example. Your Python package import name (for `import NAME` in Python code) python_package_import_name? Format: str \ud83c\udfa4 [my_project]: The name that will be used to import your package in Python code. Yes, distribution name and import name can be different! Your CLI name if any (for use in the shell) python_package_command_line_name? Format: str \ud83c\udfa4 [my-project]: The name of the command users will type in the command line to run your program.","title":"Questions"},{"location":"generate/#output","text":"At this point, Copier will generate the project in the specified directory: create pyproject.toml create mkdocs.yml create duties.py create .copier-answers.yml create README.md create Makefile create LICENSE create CREDITS.md create CONTRIBUTING.md create CODE_OF_CONDUCT.md create CHANGELOG.md create .gitlab-ci.yml create .gitignore create tests/ create tests/test_cli.py create tests/conftest.py create tests/__init__.py create src/ create src/my_project/ create src/my_project/cli.py create src/my_project/__main__.py create src/my_project/__init__.py create scripts/ create scripts/setup.sh create scripts/post_generation.py create scripts/multirun.sh create docs/ create docs/index.md create docs/credits.md create docs/contributing.md create docs/code_of_conduct.md create docs/changelog.md create docs/reference/ create docs/reference/cli.md create docs/css/ create docs/css/mkdocstrings.css create config/ create config/pytest.ini create config/mypy.ini create config/coverage.ini create .github/ create .github/FUNDING.yml create .github/workflows/ create .github/workflows/ci.yml create .github/ISSUE_TEMPLATE/ create .github/ISSUE_TEMPLATE/feature_request.md create .github/ISSUE_TEMPLATE/bug_report.md > Running task 1 of 1: python scripts/post_generation.py Project sucessfully generated! Run `make` to show the available actions. See the next chapter to learn how to work on this new project.","title":"Output"},{"location":"license/","text":"License \u00a4 ISC License Copyright (c) 2019, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"license/#license","text":"ISC License Copyright (c) 2019, Timoth\u00e9e Mazzucotelli Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies. THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.","title":"License"},{"location":"requirements/","text":"Requirements \u00a4 To use this Copier template, you will need: git v2 Python 3 Copier To install git version 2, follow the official instructions . To install Python 3, download and install it from the official website , or install it with pyenv : # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3 pyenv install 3 .8.6 # make it available globally pyenv global system 3 .8.6 # finally, restart your shell # to make sure your environment is up-to-date To install Copier, use pip or pipx : pip install --user copier pip install --user pipx pipx install copier","title":"Requirements"},{"location":"requirements/#requirements","text":"To use this Copier template, you will need: git v2 Python 3 Copier To install git version 2, follow the official instructions . To install Python 3, download and install it from the official website , or install it with pyenv : # install pyenv git clone https://github.com/pyenv/pyenv ~/.pyenv # setup pyenv (you should also put these three lines in .bashrc or similar) export PATH = \" ${ HOME } /.pyenv/bin: ${ PATH } \" export PYENV_ROOT = \" ${ HOME } /.pyenv\" eval \" $( pyenv init - ) \" # install Python 3 pyenv install 3 .8.6 # make it available globally pyenv global system 3 .8.6 # finally, restart your shell # to make sure your environment is up-to-date To install Copier, use pip or pipx : pip install --user copier pip install --user pipx pipx install copier","title":"Requirements"},{"location":"update/","text":"Updating a project \u00a4","title":"Updating a project"},{"location":"update/#updating-a-project","text":"","title":"Updating a project"},{"location":"work/","text":"Working on a project \u00a4 The generated project has this structure: \ud83d\udcc1 your_project ------------------- # your freshly created project! \u251c\u2500\u2500 \ud83d\udcc4 CHANGELOG.md --------------- # \u251c\u2500\u2500 \ud83d\udcc4 CODE_OF_CONDUCT.md --------- # \u251c\u2500\u2500 \ud83d\udcc1 config --------------------- # tools configuration files \u2502 \u251c\u2500\u2500 \ud83d\udcc4 coverage.ini ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 mypy.ini --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 pytest.ini ------------- # \u251c\u2500\u2500 \ud83d\udcc4 CONTRIBUTING.md ------------ # \u251c\u2500\u2500 \ud83d\udcc4 CREDITS.md ----------------- # \u251c\u2500\u2500 \ud83d\udcc1 docs ----------------------- # documentation pages \u2502 \u251c\u2500\u2500 \ud83d\udcc4 changelog.md ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 code_of_conduct.md ----- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 contributing.md -------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 credits.md ------------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc1 css -------------------- # extra CSS files \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocstrings.css --- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 index.md --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc1 reference -------------- # code reference pages \u2502 \u2514\u2500\u2500 \ud83d\udcc4 cli.md ------------- # \u251c\u2500\u2500 \ud83d\udcc4 duties.py ------------------ # the project's tasks \u251c\u2500\u2500 \ud83d\udcc4 LICENSE -------------------- # \u251c\u2500\u2500 \ud83d\udcc4 Makefile ------------------- # \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml ----------------- # docs configuration \u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml ------------- # project metadata and dependencies \u251c\u2500\u2500 \ud83d\udcc4 README.md ------------------ # \u251c\u2500\u2500 \ud83d\udcc1 scripts -------------------- # helper scripts \u2502 \u251c\u2500\u2500 \ud83d\udcc4 multirun.sh ------------ # to run a command in multiple virtualenvs \u2502 \u2514\u2500\u2500 \ud83d\udcc4 setup.sh --------------- # to install dependencies in multiple virtualenvs \u251c\u2500\u2500 \ud83d\udcc1 src ------------------------ # the source code directory \u2502 \u2514\u2500\u2500 \ud83d\udcc1 my_project ------------- # your package \u2502 \u251c\u2500\u2500 \ud83d\udcc4 cli.py ------------- # the command line entry point \u2502 \u251c\u2500\u2500 \ud83d\udcc4 __init__.py -------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 __main__.py -------- # \u2514\u2500\u2500 \ud83d\udcc1 tests ---------------------- # the tests directory \u251c\u2500\u2500 \ud83d\udcc4 conftest.py ------------ # pytest fixtures, etc. \u251c\u2500\u2500 \ud83d\udcc4 __init__.py ------------ # \u2514\u2500\u2500 \ud83d\udcc4 test_cli.py ------------ # Dependencies and virtual environments \u00a4 Tasks \u00a4 Makefile \u00a4 The entry-point is the Makefile: make changelog : Update the changelog in-place with latest commits. make check : Run all checks. make check-code-quality : Check the code quality. make check-dependencies : Check for vulnerabilities in dependencies. make check-docs : Check if the documentation builds correctly. make check-types : Check if the code is correctly typed. make clean : Delete temporary files. make docs : Build the documentation locally. make docs-regen : Regenerate some documentation pages. make docs-serve : Serve the documentation (localhost:8000). make docs-deploy : Deploy the documentation on GitHub pages. make help : Print this help. make format : Run formatting tools on the code. make release : Create a new release (commit, tag, push, build, publish, deploy docs). make setup : Setup the development environment (install dependencies). make test : Run the test suite and report coverage. Quality analysis \u00a4 check-code-quality \u00a4 check-dependencies \u00a4 check-docs \u00a4 check-types \u00a4 Tests \u00a4 Continuous Integration \u00a4 GitHub Workflow \u00a4 GitLab CI \u00a4 Documentation \u00a4 Writing \u00a4 Serving \u00a4 Deploying \u00a4","title":"Working on a project"},{"location":"work/#working-on-a-project","text":"The generated project has this structure: \ud83d\udcc1 your_project ------------------- # your freshly created project! \u251c\u2500\u2500 \ud83d\udcc4 CHANGELOG.md --------------- # \u251c\u2500\u2500 \ud83d\udcc4 CODE_OF_CONDUCT.md --------- # \u251c\u2500\u2500 \ud83d\udcc1 config --------------------- # tools configuration files \u2502 \u251c\u2500\u2500 \ud83d\udcc4 coverage.ini ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 mypy.ini --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 pytest.ini ------------- # \u251c\u2500\u2500 \ud83d\udcc4 CONTRIBUTING.md ------------ # \u251c\u2500\u2500 \ud83d\udcc4 CREDITS.md ----------------- # \u251c\u2500\u2500 \ud83d\udcc1 docs ----------------------- # documentation pages \u2502 \u251c\u2500\u2500 \ud83d\udcc4 changelog.md ----------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 code_of_conduct.md ----- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 contributing.md -------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 credits.md ------------- # \u2502 \u251c\u2500\u2500 \ud83d\udcc1 css -------------------- # extra CSS files \u2502 \u2502 \u2514\u2500\u2500 \ud83d\udcc4 mkdocstrings.css --- # \u2502 \u251c\u2500\u2500 \ud83d\udcc4 index.md --------------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc1 reference -------------- # code reference pages \u2502 \u2514\u2500\u2500 \ud83d\udcc4 cli.md ------------- # \u251c\u2500\u2500 \ud83d\udcc4 duties.py ------------------ # the project's tasks \u251c\u2500\u2500 \ud83d\udcc4 LICENSE -------------------- # \u251c\u2500\u2500 \ud83d\udcc4 Makefile ------------------- # \u251c\u2500\u2500 \ud83d\udcc4 mkdocs.yml ----------------- # docs configuration \u251c\u2500\u2500 \ud83d\udcc4 pyproject.toml ------------- # project metadata and dependencies \u251c\u2500\u2500 \ud83d\udcc4 README.md ------------------ # \u251c\u2500\u2500 \ud83d\udcc1 scripts -------------------- # helper scripts \u2502 \u251c\u2500\u2500 \ud83d\udcc4 multirun.sh ------------ # to run a command in multiple virtualenvs \u2502 \u2514\u2500\u2500 \ud83d\udcc4 setup.sh --------------- # to install dependencies in multiple virtualenvs \u251c\u2500\u2500 \ud83d\udcc1 src ------------------------ # the source code directory \u2502 \u2514\u2500\u2500 \ud83d\udcc1 my_project ------------- # your package \u2502 \u251c\u2500\u2500 \ud83d\udcc4 cli.py ------------- # the command line entry point \u2502 \u251c\u2500\u2500 \ud83d\udcc4 __init__.py -------- # \u2502 \u2514\u2500\u2500 \ud83d\udcc4 __main__.py -------- # \u2514\u2500\u2500 \ud83d\udcc1 tests ---------------------- # the tests directory \u251c\u2500\u2500 \ud83d\udcc4 conftest.py ------------ # pytest fixtures, etc. \u251c\u2500\u2500 \ud83d\udcc4 __init__.py ------------ # \u2514\u2500\u2500 \ud83d\udcc4 test_cli.py ------------ #","title":"Working on a project"},{"location":"work/#dependencies-and-virtual-environments","text":"","title":"Dependencies and virtual environments"},{"location":"work/#tasks","text":"","title":"Tasks"},{"location":"work/#makefile","text":"The entry-point is the Makefile: make changelog : Update the changelog in-place with latest commits. make check : Run all checks. make check-code-quality : Check the code quality. make check-dependencies : Check for vulnerabilities in dependencies. make check-docs : Check if the documentation builds correctly. make check-types : Check if the code is correctly typed. make clean : Delete temporary files. make docs : Build the documentation locally. make docs-regen : Regenerate some documentation pages. make docs-serve : Serve the documentation (localhost:8000). make docs-deploy : Deploy the documentation on GitHub pages. make help : Print this help. make format : Run formatting tools on the code. make release : Create a new release (commit, tag, push, build, publish, deploy docs). make setup : Setup the development environment (install dependencies). make test : Run the test suite and report coverage.","title":"Makefile"},{"location":"work/#quality-analysis","text":"","title":"Quality analysis"},{"location":"work/#check-code-quality","text":"","title":"check-code-quality"},{"location":"work/#check-dependencies","text":"","title":"check-dependencies"},{"location":"work/#check-docs","text":"","title":"check-docs"},{"location":"work/#check-types","text":"","title":"check-types"},{"location":"work/#tests","text":"","title":"Tests"},{"location":"work/#continuous-integration","text":"","title":"Continuous Integration"},{"location":"work/#github-workflow","text":"","title":"GitHub Workflow"},{"location":"work/#gitlab-ci","text":"","title":"GitLab CI"},{"location":"work/#documentation","text":"","title":"Documentation"},{"location":"work/#writing","text":"","title":"Writing"},{"location":"work/#serving","text":"","title":"Serving"},{"location":"work/#deploying","text":"","title":"Deploying"}]}